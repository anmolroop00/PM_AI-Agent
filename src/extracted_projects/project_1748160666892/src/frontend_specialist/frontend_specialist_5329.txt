import React, { useState, useEffect } from 'react';
import UserForm from './UserForm';

const Users = () => {
  const [users, setUsers] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);

  useEffect(() => {
    // Fetch users from the backend API
    const fetchUsers = async () => {
      try {
        const response = await fetch('/api/users'); // Replace with your API endpoint
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        setUsers(data);
      } catch (error) {
        console.error('Error fetching users:', error);
      }
    };

    fetchUsers();
  }, []);

  const handleCreate = () => {
    setSelectedUser(null);
    setShowForm(true);
  };

  const handleEdit = (user) => {
    setSelectedUser(user);
    setShowForm(true);
  };

  const handleDelete = async (id) => {
    try {
      const response = await fetch(`/api/users/${id}`, { method: 'DELETE' }); // Replace with your API endpoint
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      setUsers(users.filter((user) => user.id !== id));
    } catch (error) {
      console.error('Error deleting user:', error);
    }
  };

  const handleFormSubmit = async (userData) => {
    try {
      let response;
      if (selectedUser) {
        // Update existing user
        response = await fetch(`/api/users/${selectedUser.id}`, {
          method: 'PUT', // or PATCH
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(userData),
        });
      } else {
        // Create new user
        response = await fetch('/api/users', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(userData),
        });
      }

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const newUser = await response.json();

      if (selectedUser) {
        // Update the user in the state
        setUsers(users.map(user => user.id === selectedUser.id ? newUser : user));
      } else {
        // Add the new user to the state
        setUsers([...users, newUser]);
      }

      setShowForm(false);
      setSelectedUser(null);

    } catch (error) {
      console.error('Error saving user:', error);
    }
  };


  return (
    <div>
      <h2>Users Management</h2>
      <button onClick={handleCreate}>Create New User</button>

      {showForm && (
        <UserForm
          onSubmit={handleFormSubmit}
          onCancel={() => setShowForm(false)}
          initialValues={selectedUser}
        />
      )}

      <ul>
        {users.map((user) => (
          <li key={user.id}>
            {user.username} - {user.email}
            <button onClick={() => handleEdit(user)}>Edit</button>
            <button onClick={() => handleDelete(user.id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Users;